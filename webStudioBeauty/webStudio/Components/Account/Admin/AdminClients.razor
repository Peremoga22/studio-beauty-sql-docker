@page "/admin-clients"
@using Microsoft.AspNetCore.Authorization
@using webStudio.Components.Layout
@layout AdminLayout
@using System.Globalization
@inject CategoryService _categoryService
@inject AppointmentUserService _appointmentUserService
@inject CosmetologyService _cosmetologyService
@inject MassageService _massageService
@inject NavigationManager _navigationManager
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]

<h3 style="padding-top: 2%;"></h3>
<div class="container mt-4">
    <h3 style="color:hotpink">Записи клієнтів</h3>
</div>

<main class="container">
    <section class="card card--elevated">
        <header class="card__header">
            <div>
                <h1 class="title">Календар записів</h1>
                <p class="subtitle">Оберіть день і перегляньте всі записи за послугами</p>
            </div>          
        </header>

        <div class="divider"></div>

        <section aria-label="Список записів" class="cards">
            @foreach (var item in ((appointmentUsers ?? Enumerable.Empty<AppointmentUser>()).Where(a => a.IsConfirmed == true)))
            {
                var cat = categories?.FirstOrDefault(c => c.Id == item.CategoryId);
                var ua = new System.Globalization.CultureInfo("uk-UA");
                
                (string TitleCard, decimal Price)? service = massageTherapyCards?.FirstOrDefault(s => s.Id == item.ServiceId) is { } m
                ? (m.TitleCard, m.Price)
                : cosmetologyTherapyCards?.FirstOrDefault(s => s.Id == item.ServiceId) is { } c
                ? (c.TitleCard, c.Price)
                : null;

                <article class="entry">
                    <div class="entry__row">
                        @if (cat is not null)
                        {
                            <span class="badge badge--massage">@cat.NameCategory</span>
                        }
                        <span class="time">
                            @($"{item.SetHour:HH\\:mm} – {item.SetHour.AddMinutes(60):HH\\:mm}")
                        </span>                       
                    </div>

                    <div class="text-end">
                        <span>@item.Date.ToString("dd.MM.yyyy")</span>
                    </div>

                    <div class="client"><strong>@item.FullName</strong></div>
                    <div class="client"><strong><a href="tel:@item.Phone">@item.Phone</a></strong></div>

                    @if (service is not null)
                    {
                        <div class="procedure">@service.Value.TitleCard</div>
                        <div class="meta">
                            <span class="duration">@service.Value.Price.ToString("C0", ua)</span>
                        </div>
                    }
                    
                    <div class="ms-auto text-center">
                        <button class="btn btn-outline-danger btn-sm rounded-pill d-inline-flex align-items-center gap-1"
                                title="Видалити запис"
                                disabled="@deleting.Contains(item.Id)"
                                @onclick="() => ConfirmAndDeleteAsync(item)">
                            <i class="fa-solid fa-trash" aria-hidden="true"></i>
                            <span>@(deleting.Contains(item.Id) ? "Видаляю..." : "Видалити")</span>
                        </button>
                    </div>
                </article>
            }
        </section>

    </section>
</main>
@code {
    private List<AppointmentUser> appointmentUsers = new();
    private List<Category> categories = new();
    private List<MassageTherapyCard> massageTherapyCards = new();
    private List<CosmetologyTherapyCard> cosmetologyTherapyCards = new();
    private HashSet<int> deleting = new();

    protected override async Task OnInitializedAsync()
    {
        appointmentUsers = await _appointmentUserService.GetAllAppointmentUseListAsync();
        categories = await _categoryService.GetAllCategoryListAsync();
        massageTherapyCards = await _massageService.GetAllMassageTherapyCardListAsync();
        cosmetologyTherapyCards = await _cosmetologyService.GetAllCosmetologyTherapyCardListAsync();
    }

    private async Task ConfirmAndDeleteAsync(AppointmentUser item)
    {
        item.IsConfirmed = false;
        _appointmentUserService.Save(item);
    }
}


