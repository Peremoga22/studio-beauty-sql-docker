@page "/edit-cosmetology"
@page "/edit-cosmetology/{Id:int}"

@using System.Globalization
@inject IWebHostEnvironment Env
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager _navigationManager
@inject CosmetologyService _cosmetologyService
@inject IJSRuntime _jSRuntime
@layout AdminLayout
@attribute [Authorize(Roles = "Admin")]
@rendermode InteractiveServer

<h3>EditCosmetology</h3>

<div class="container my-4">
    @if (Id == 0)
    {

        <nav aria-label="breadcrumb" class="bg-light rounded px-3 py-4 mb-4">
            <ol class="breadcrumb mb-0">
                <li class="breadcrumb-item"><a href="/admin-cosmetology" style="color: #f8b7d8;">Повернутися до категорій</a></li>
                <li class="breadcrumb-item active" aria-current="page">Додати категорію</li>
            </ol>
        </nav>
    }
    else
    {
        <nav aria-label="breadcrumb" class="bg-light rounded px-3 py-4 mb-4">
            <ol class="breadcrumb mb-0">
                <li class="breadcrumb-item"><a href="/admin-cosmetology" style="color: #f8b7d8;">Повернутися до категорій</a></li>
                <li class="breadcrumb-item active" aria-current="page">Редагувати категорію</li>
            </ol>
        </nav>
    }

    <div class="d-flex justify-content-center">
        <EditForm Model="@modelTitle" method="post" OnSubmit="HandleValidSubmit"
                  FormName="CosmetologyTherapy"
                  class="card shadow-sm border rounded-3 p-4 bg-white"
                  style="width: 100%; max-width: 600px;">

            <DataAnnotationsValidator />
            <ValidationSummary class="alert alert-danger small" />

            <div class="card-body">
                <h5 class="card-title text-center mb-3 text-dark fw-bold">
                    @(Id == 0 ? "Назва титулки сторінки" : "Редагувати титолку сторінки")
                </h5>

                <div class="mb-3">
                    <label for="TitlePage" class="form-label fw-semibold small">
                        Назва сторінки <span class="text-danger">*</span>
                    </label>
                    <InputText @bind-Value="modelTitle.TitlePage" id="InputTitlePaage"
                               class="form-control form-control-sm"
                               placeholder="Введіть назву..." />
                    <ValidationMessage For="@(() => modelTitle.TitlePage)" class="text-danger small" />
                </div>
                <div class="mb-3">
                    <label for="TitlePage" class="form-label fw-semibold small">
                        Опис сторінки <span class="text-danger">*</span>
                    </label>
                    <InputText @bind-Value="modelTitle.Description" id="InputDescription"
                               class="form-control form-control-sm"
                               placeholder="Введіть назву..." />
                    <ValidationMessage For="@(() => modelTitle.Description)" class="text-danger small" />
                </div>               

                <div class="d-flex justify-content-end gap-2 mt-3">
                    <button type="submit" class="btn btn-sm btn-primary px-3">
                        <i class="bi bi-save"></i> Зберегти
                    </button>
                    <NavLink class="btn btn-sm btn-outline-secondary px-3" href="/admin-cosmetologe">
                        <i class="bi bi-x-circle"></i> Скасувати
                    </NavLink>
                </div>
            </div>
        </EditForm>
    </div>       
</div>

<div class="container my-4">
    <EditForm Model="@cosmetologyTherapyCard"
              OnValidSubmit="SaveAsync"
              class="card shadow-sm border-0 rounded-3 p-4 bg-light"
              style="max-width: 600px; margin:auto;">

        <DataAnnotationsValidator />
        <ValidationSummary class="alert alert-danger small" />
        <h5 class="card-title text-center mb-4 text-primary fw-bold">
            @(cosmetologyTherapyCard.Id == 0 ? "Додати нову картку" : "Редагувати картку")
        </h5>    
        <div class="mb-3">
            <label for="TitleCard" class="form-label fw-semibold">
                Назва карточки <span class="text-danger">*</span>
            </label>
            <InputText @bind-Value="cosmetologyTherapyCard.TitleCard"
                       id="TitleCard"
                       class="form-control form-control-sm"
                       placeholder="Введіть назву..." />
            <ValidationMessage For="@(() => cosmetologyTherapyCard.TitleCard)" class="text-danger small" />
        </div>
        <div class="mb-3">
            <label for="DescriptionCard" class="form-label fw-semibold">
                Опис карточки <span class="text-danger">*</span>
            </label>
            <InputText @bind-Value="cosmetologyTherapyCard.DescriptionCard"
                       id="DescriptionCard"
                       class="form-control form-control-sm"
                       placeholder="Введіть опис..." />
            <ValidationMessage For="@(() => cosmetologyTherapyCard.DescriptionCard)" class="text-danger small" />
        </div>
        <div class="mb-3">
            <label for="Price" class="form-label fw-semibold">
                Ціна за послугу <span class="text-danger">*</span>
            </label>
            <InputNumber @bind-Value="cosmetologyTherapyCard.Price"
                       id="Price"
                       class="form-control form-control-sm"
                       placeholder="Введіть ціну..." />
            <ValidationMessage For="@(() => cosmetologyTherapyCard.Price)" class="text-danger small" />
        </div>  
        <div class="mb-3">
            <label class="form-label fw-semibold">Фото (jpg/jpeg/png)</label>
            <InputFile OnChange="OnFileSelected"
                       class="form-control form-control-sm"
                       accept=".jpg,.jpeg,.png" />

            @if (!string.IsNullOrEmpty(cosmetologyTherapyCard.ImageUrl))
            {
                <div class="mt-3 text-center">
                    <img src="@cosmetologyTherapyCard.ImageUrl"
                         alt="preview"
                         class="img-thumbnail shadow-sm"
                         style="max-height:200px; object-fit:contain;" />
                </div>
            }
        </div>    
        <div class="d-flex justify-content-end gap-2 mt-3">
            <button type="submit" class="btn btn-primary px-4">
                <i class="bi bi-save"></i> Зберегти
            </button>
            <NavLink class="btn btn-outline-secondary px-4" href="/cosmetology-list">
                <i class="bi bi-x-circle"></i> Скасувати
            </NavLink>
        </div>
    </EditForm>
</div>

<div class="row g-3">
    @foreach (var item in cosmetologyTherapyCards)  
    {
        <div class="col-12 col-sm-6 col-lg-4">
            <div class="card shadow-sm border-0 rounded-3 product-card h-100">
                <div class="ratio ratio-4x3">
                    <img src="@item.ImageUrl"
                         alt="@item.TitleCard"
                         class="card-img-top object-fit-cover"
                         loading="lazy" >                         
                </div>
                <div class="card-body d-flex flex-column">
                    <h6 class="card-title mb-2 text-dark fw-semibold">@item.TitleCard</h6>
                    <p class="card-text text-muted mb-3 line-clamp-3">@item.DescriptionCard</p>

                    <div class="mt-auto d-flex align-items-center justify-content-between">
                        <span class="badge bg-primary-subtle text-primary fs-6 px-3 py-2 rounded-pill">
                            @item.Price.ToString("C", new CultureInfo("uk-UA"))
                        </span>                       
                    </div>
                </div>
            </div>
        </div>
    }
</div>


@code {
    [Parameter] 
    public int Id { get; set; }
    private CosmetologyTherapy modelTitle = new();
    private CosmetologyTherapyCard cosmetologyTherapyCard = new();
    private List<CosmetologyTherapy> cosmetologies = new();
    private List<CosmetologyTherapyCard> cosmetologyTherapyCards = new();
    private IBrowserFile? uploadedFile;
    private  const long maxSize = 5 * 1024 * 1024;

    private const long MaxSize = 5 * 1024 * 1024;
    private const string UploadsSubfolder = "uploads/cosmetology";

    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
           
        }

        cosmetologyTherapyCards = await _cosmetologyService.GetAllCosmetologyTherapyCardListAsync();
        this.StateHasChanged();
    }

    private void OnFileSelected(InputFileChangeEventArgs e)
    {

        uploadedFile = e.File;
    }

    private async Task SaveAsync()
    {
        if (uploadedFile is not null)
        {
            var ext = Path.GetExtension(uploadedFile.Name)?.ToLowerInvariant();
            var allowed = new HashSet<string>(StringComparer.OrdinalIgnoreCase) { ".jpg", ".jpeg", ".png", ".webp" };
            if (string.IsNullOrWhiteSpace(ext) || !allowed.Contains(ext))
                throw new InvalidOperationException("Дозволені формати: JPG, JPEG, PNG, WEBP.");

            if (uploadedFile.Size > MaxSize)
                throw new InvalidOperationException("Файл завеликий (максимум 5 МБ).");

            var webRoot = Env.WebRootPath ?? throw new InvalidOperationException("WebRootPath недоступний.");
            var physicalFolder = Path.Combine(webRoot, UploadsSubfolder);
            Directory.CreateDirectory(physicalFolder);

            var fileName = $"{Guid.NewGuid():N}{ext}";
            var physicalPath = Path.Combine(physicalFolder, fileName);

            // Запис із дозволом на читання іншими процесами
            await using (var fs = new FileStream(physicalPath, FileMode.Create, FileAccess.Write, FileShare.Read, 81920, true))
            {
                await uploadedFile.OpenReadStream(MaxSize).CopyToAsync(fs);
            }

            // (опц.) видалити старе
            if (!string.IsNullOrEmpty(cosmetologyTherapyCard.ImageUrl))
            {
                var oldPhysical = Path.Combine(webRoot, cosmetologyTherapyCard.ImageUrl.TrimStart('/').Replace('/', Path.DirectorySeparatorChar));
                try { if (File.Exists(oldPhysical)) File.Delete(oldPhysical); } catch { /* лог або відкладити */ }
            }

            // В БД — тільки відносний веб-шлях
            cosmetologyTherapyCard.ImageUrl = "/" + Path.Combine(UploadsSubfolder, fileName).Replace("\\", "/");
            cosmetologyTherapyCard.PathFolderImageUrl = physicalFolder;
        }

        _cosmetologyService.SaveCosmetologyTherapyCard(cosmetologyTherapyCard);
        _navigationManager.NavigateTo("/cosmetology-list");
    }

    ///uploads/cosmetology/ff78aa09c7ee412d9ed9fdf81d336c75.jpg
    private async Task HandleValidSubmit()
    {
        int tempCategory = 8;
       // model.CategoryId = tempCategory;
        _cosmetologyService.SaveTitle(modelTitle);
        _navigationManager.NavigateTo("/admin-cosmetologe");
    }

    private void Cancel()
    {
        
    }
}
